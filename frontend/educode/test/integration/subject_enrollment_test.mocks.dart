// Mocks generated by Mockito 5.4.4 from annotations
// in educode/test/integration/subject_enrollment_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:ui' as _i8;

import 'package:educode/features/auth/presentation/providers/auth_provider.dart'
    as _i7;
import 'package:educode/features/courses/data/services/enrollment_service.dart'
    as _i4;
import 'package:educode/features/courses/domain/models/activity_model.dart'
    as _i10;
import 'package:educode/features/courses/domain/models/enrolled_student_model.dart'
    as _i6;
import 'package:educode/features/courses/domain/models/subject_model.dart'
    as _i3;
import 'package:educode/features/courses/domain/models/user_profile_model.dart'
    as _i2;
import 'package:educode/features/courses/presentation/providers/subjects_provider.dart'
    as _i9;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i11;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUserProfileModel_0 extends _i1.SmartFake
    implements _i2.UserProfileModel {
  _FakeUserProfileModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSubject_1 extends _i1.SmartFake implements _i3.Subject {
  _FakeSubject_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [EnrollmentService].
///
/// See the documentation for Mockito's code generation for more information.
class MockEnrollmentService extends _i1.Mock implements _i4.EnrollmentService {
  MockEnrollmentService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i6.EnrolledStudent>> getEnrolledStudents(
    int? subjectId,
    String? token,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getEnrolledStudents,
          [
            subjectId,
            token,
          ],
        ),
        returnValue: _i5.Future<List<_i6.EnrolledStudent>>.value(
            <_i6.EnrolledStudent>[]),
      ) as _i5.Future<List<_i6.EnrolledStudent>>);

  @override
  _i5.Future<void> enrollInSubject(
    String? userId,
    String? subjectId,
    String? accessCode,
    String? token,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #enrollInSubject,
          [
            userId,
            subjectId,
            accessCode,
            token,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> cancelEnrollment(
    int? subjectId,
    int? userId,
    String? token,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #cancelEnrollment,
          [
            subjectId,
            userId,
            token,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<_i2.UserProfileModel> getUserProfile(
    String? userId,
    String? token,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserProfile,
          [
            userId,
            token,
          ],
        ),
        returnValue:
            _i5.Future<_i2.UserProfileModel>.value(_FakeUserProfileModel_0(
          this,
          Invocation.method(
            #getUserProfile,
            [
              userId,
              token,
            ],
          ),
        )),
      ) as _i5.Future<_i2.UserProfileModel>);
}

/// A class which mocks [AuthProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthProvider extends _i1.Mock implements _i7.AuthProvider {
  MockAuthProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
      ) as bool);

  @override
  bool get isAuthenticated => (super.noSuchMethod(
        Invocation.getter(#isAuthenticated),
        returnValue: false,
      ) as bool);

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i5.Future<bool> login(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [
            email,
            password,
          ],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<void> logout() => (super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<bool> checkAuthStatus() => (super.noSuchMethod(
        Invocation.method(
          #checkAuthStatus,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<bool> register(
    String? email,
    String? password,
    String? name,
    String? lastName,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #register,
          [
            email,
            password,
            name,
            lastName,
          ],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  void clearError() => super.noSuchMethod(
        Invocation.method(
          #clearError,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<bool> updateProfile({
    required String? nombre,
    required String? apellidos,
    required String? email,
    String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateProfile,
          [],
          {
            #nombre: nombre,
            #apellidos: apellidos,
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  void addListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [SubjectsProvider].
///
/// See the documentation for Mockito's code generation for more information.
class MockSubjectsProvider extends _i1.Mock implements _i9.SubjectsProvider {
  MockSubjectsProvider() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i3.Subject> get subjects => (super.noSuchMethod(
        Invocation.getter(#subjects),
        returnValue: <_i3.Subject>[],
      ) as List<_i3.Subject>);

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
      ) as bool);

  @override
  set subjects(List<_i3.Subject>? value) => super.noSuchMethod(
        Invocation.setter(
          #subjects,
          value,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get hasListeners => (super.noSuchMethod(
        Invocation.getter(#hasListeners),
        returnValue: false,
      ) as bool);

  @override
  _i5.Future<void> loadSubjects(
    String? userId,
    String? userType,
    String? token,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #loadSubjects,
          [
            userId,
            userType,
            token,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> createSubject(
    Map<String, String>? data,
    String? token,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #createSubject,
          [
            data,
            token,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void setCurrentSubject(_i3.Subject? subject) => super.noSuchMethod(
        Invocation.method(
          #setCurrentSubject,
          [subject],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<_i3.Subject> updateSubject(
    int? subjectId,
    Map<String, String>? data,
    String? token,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateSubject,
          [
            subjectId,
            data,
            token,
          ],
        ),
        returnValue: _i5.Future<_i3.Subject>.value(_FakeSubject_1(
          this,
          Invocation.method(
            #updateSubject,
            [
              subjectId,
              data,
              token,
            ],
          ),
        )),
      ) as _i5.Future<_i3.Subject>);

  @override
  _i5.Future<_i3.Subject> getSubjectDetail(
    int? subjectId,
    String? token,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSubjectDetail,
          [
            subjectId,
            token,
          ],
        ),
        returnValue: _i5.Future<_i3.Subject>.value(_FakeSubject_1(
          this,
          Invocation.method(
            #getSubjectDetail,
            [
              subjectId,
              token,
            ],
          ),
        )),
      ) as _i5.Future<_i3.Subject>);

  @override
  _i5.Future<List<dynamic>> getAvailableSubjects(String? token) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAvailableSubjects,
          [token],
        ),
        returnValue: _i5.Future<List<dynamic>>.value(<dynamic>[]),
      ) as _i5.Future<List<dynamic>>);

  @override
  _i5.Future<List<_i10.ActivityModel>> getCourseActivities(
    int? courseId,
    String? token,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCourseActivities,
          [
            courseId,
            token,
          ],
        ),
        returnValue:
            _i5.Future<List<_i10.ActivityModel>>.value(<_i10.ActivityModel>[]),
      ) as _i5.Future<List<_i10.ActivityModel>>);

  @override
  _i5.Future<String> downloadSubjectCsv(
    int? subjectId,
    String? token,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #downloadSubjectCsv,
          [
            subjectId,
            token,
          ],
        ),
        returnValue: _i5.Future<String>.value(_i11.dummyValue<String>(
          this,
          Invocation.method(
            #downloadSubjectCsv,
            [
              subjectId,
              token,
            ],
          ),
        )),
      ) as _i5.Future<String>);

  @override
  _i5.Future<void> deleteSubject(
    int? subjectId,
    String? token,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteSubject,
          [
            subjectId,
            token,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  void addListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #addListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeListener(_i8.VoidCallback? listener) => super.noSuchMethod(
        Invocation.method(
          #removeListener,
          [listener],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void notifyListeners() => super.noSuchMethod(
        Invocation.method(
          #notifyListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
